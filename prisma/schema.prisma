generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Cliente {
  id_cliente      Int      @id @default(autoincrement())
  telefone        String?
  nome            String
  sobrenome       String
  cpf             String?  @unique
  data_nascimento String?
  email           String   @unique
  password        String
  endereco_estado String?
  endereco_cidade String?
  endereco_bairro String?
  endereco_rua    String?
  endereco_numero String?
  avaliacao       String?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt
  foto            String?
  Card            Card[]
}

model Prestador {
  id_prestador           Int            @id @default(autoincrement())
  telefone               String?
  nome                   String
  sobrenome              String
  cpf                    String?        @unique
  data_nascimento        String?
  email                  String         @unique
  password               String
  endereco_estado        String?
  endereco_cidade        String?
  endereco_bairro        String?
  endereco_rua           String?
  endereco_numero        String?
  especializacao         String?
  descricao              String?        @db.Text
  avaliacao              String?
  created_at             DateTime       @default(now())
  updated_at             DateTime       @default(now()) @updatedAt
  foto                   String?
  numero_servicos_feitos Int?
  Candidatura            Candidatura[]
  Card                   Card[]
  Experiencias           Experiencia[]  @relation("PrestadorExperiencias")
  Certificacoes          Certificacao[] @relation("PrestadorCertificacoes")
}

// NOVA TABELA: Experiência Profissional
model Experiencia {
  id           Int      @id @default(autoincrement())
  titulo       String
  descricao    String?
  empresa      String?
  data_inicio  String? // "2020-01" ou "2020"
  data_fim     String? // "2022-12" ou "2022" ou "Atual"
  tipo         String? // "emprego", "freelance", "projeto"
  prestador_id Int
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  Prestador Prestador           @relation("PrestadorExperiencias", fields: [prestador_id], references: [id_prestador], onDelete: Cascade)
  imagens   ImagemExperiencia[]
}

// NOVA TABELA: Certificações
model Certificacao {
  id            Int                  @id @default(autoincrement())
  titulo        String
  descricao     String?
  instituicao   String
  data_emissao  String? // "2023-05-15" ou "05/2023"
  data_validade String? // "2025-05-15" ou "05/2025"
  codigo        String? // Código da certificação
  url           String? // Link para verificar a certificação
  prestador_id  Int
  Imagens       ImagemCertificacao[]
  created_at    DateTime             @default(now())
  updated_at    DateTime             @default(now()) @updatedAt

  Prestador Prestador @relation("PrestadorCertificacoes", fields: [prestador_id], references: [id_prestador], onDelete: Cascade)
}

model Candidatura {
  id_candidatura    Int       @id @default(autoincrement())
  id_pedido         String
  prestador_id      Int
  valor_negociado   String?
  horario_negociado String?
  status            String?
  data_candidatura  DateTime  @default(now())
  Card              Card      @relation(fields: [id_pedido], references: [id_pedido])
  Prestador         Prestador @relation(fields: [prestador_id], references: [id_prestador])

  @@unique([id_pedido, prestador_id])
}

model Card {
  id_pedido                 String        @id
  id_cliente                Int
  id_prestador              Int?
  categoria                 String
  subcategoria              String
  serviceDescription        String?       @db.Text
  valor                     Decimal       @db.Decimal(10, 2)
  horario_preferencial      String
  valor_negociado_cliente   String?
  horario_negociado_cliente String?
  codigo_confirmacao        String?
  data_finalizacao          DateTime?
  status_pedido             String
  cancellation_reason       String?
  cep                       String
  street                    String
  neighborhood              String
  city                      String
  state                     String
  number                    String
  complement                String?
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @default(now()) @updatedAt
  Cliente                   Cliente       @relation(fields: [id_cliente], references: [id_cliente])
  Prestador                 Prestador?    @relation(fields: [id_prestador], references: [id_prestador])
  Candidatura               Candidatura[]
  imagens                   Imagem[]
  pagamentos                Pagamento[]
}

model Pagamento {
  id                   Int       @id @default(autoincrement())
  id_pagamento         String?
  id_pedido            String
  total_amount         Int // Valor pago
  origin_amount        Int // Valor pago
  auth_code            String? // Código de autorização
  status               String // captured, denied, cancelled, pending, etc.
  response_description String? // Descrição da resposta
  type                 String? // Tipo de pagamento
  host                 String? // Adquirente
  installments         Int? // Número de parcelas
  installments_amount  Int? // Valor por parcela
  authorization_date   DateTime? // Data de autorização
  capture_date         DateTime? // Data de captura
  reversed_amount      Int? // Valor estornado
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now()) @updatedAt

  // Relações
  Card Card @relation(fields: [id_pedido], references: [id_pedido])

  @@map("pagamentos")
}

model Imagem {
  id        Int      @id @default(autoincrement())
  nome      String
  url       String
  cardId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  card      Card     @relation(fields: [cardId], references: [id_pedido])
}

// Imagens para Experiencia
model ImagemExperiencia {
  id            Int         @id @default(autoincrement())
  url           String
  experienciaId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  experiencia   Experiencia @relation(fields: [experienciaId], references: [id])
}

// Imagens para Certificacao
model ImagemCertificacao {
  id              Int          @id @default(autoincrement())
  url             String
  certificacao_id Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now()) @updatedAt
  Certificacao    Certificacao @relation(fields: [certificacao_id], references: [id])
}
