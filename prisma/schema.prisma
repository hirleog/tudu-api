generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// model Usuario {
//   id              Int         @id @default(autoincrement())
//   telefone        String      @db.VarChar(15)
//   nome            String      @db.VarChar(100)
//   sobrenome       String      @db.VarChar(100)
//   cpf             String?     @unique @db.VarChar(14)
//   data_nascimento String?
//   email           String      @unique @db.VarChar(100)
//   password        String
//   endereco_estado String?     @db.VarChar(50)
//   endereco_cidade String?     @db.VarChar(100)
//   endereco_bairro String?     @db.VarChar(100)
//   endereco_rua    String?     @db.VarChar(100)
//   endereco_numero String?     @db.VarChar(10)
//   data_cadastro   DateTime    @default(now())
//   status          String      @default("Ativo") @db.VarChar(50)
//   created_at      DateTime    @default(now())
//   updated_at      DateTime    @default(now()) @updatedAt
//   Cliente         Cliente[]
//   Prestador       Prestador[]
// }

model Cliente {
  id_cliente      Int      @id @default(autoincrement())
  telefone        String?
  nome            String
  sobrenome       String
  cpf             String?  @unique
  data_nascimento String?
  email           String   @unique
  password        String
  endereco_estado String?
  endereco_cidade String?
  endereco_bairro String?
  endereco_rua    String?
  endereco_numero String?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  Card Card[]
}

model Prestador {
  id_prestador    Int      @id @default(autoincrement())
  telefone        String?
  nome            String
  sobrenome       String
  cpf             String?  @unique
  data_nascimento String?
  email           String   @unique
  password        String
  endereco_estado String?
  endereco_cidade String?
  endereco_bairro String?
  endereco_rua    String?
  endereco_numero String?
  especializacao  String?
  descricao       String?
  avaliacao       String?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  Candidatura Candidatura[]
  Card        Card[]        @relation("PrestadorCards")
}

model Candidatura {
  id_candidatura    Int      @id @default(autoincrement())
  id_pedido         String // Relacionado ao Card
  prestador_id      Int // Relacionado ao Prestador
  valor_negociado   String?
  horario_negociado String?
  status            String?
  data_candidatura  DateTime @default(now())

  Card      Card      @relation(fields: [id_pedido], references: [id_pedido])
  Prestador Prestador @relation(fields: [prestador_id], references: [id_prestador])

  @@unique([id_pedido, prestador_id]) // Chave composta
}

model Card {
  id_pedido    String @id @default(uuid())
  id_cliente   Int
  id_prestador Int? // Pode ser nulo inicialmente

  categoria            String
  subcategoria         String
  valor                String
  horario_preferencial String
  valor_negociado      String?
  horario_negociado    String?
  status               Boolean?
  codigo_confirmacao   String?
  data_finalizacao     String?
  status_pedido        String

  // Campos de endere√ßo
  cep          String
  street       String
  neighborhood String
  city         String
  state        String
  number       String
  complement   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Cliente     Cliente       @relation(fields: [id_cliente], references: [id_cliente])
  Prestador   Prestador?    @relation(fields: [id_prestador], references: [id_prestador], name: "PrestadorCards")
  Candidatura Candidatura[]
}
