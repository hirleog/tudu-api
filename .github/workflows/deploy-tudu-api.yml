name: Deploy Tudu API (Production)

on:
  push:
    branches: ['master', 'main']

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # Configuração SSH com tratamento de erros
      - name: Configure SSH
        run: |
          set -e  # Faz o script falhar imediatamente em caso de erro
          echo "Configuring SSH..."

          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Escreve a chave SSH com verificação
          echo "${{ secrets.API_TUDU_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Verifica se a chave foi escrita corretamente
          if [ ! -s ~/.ssh/deploy_key ]; then
            echo "Error: SSH key file is empty!"
            exit 1
          fi

          # Configuração do SSH
          cat <<EOF > ~/.ssh/config
          Host ${{ secrets.SSH_HOST || '89.116.73.70' }}
            HostName ${{ secrets.SSH_HOST || '89.116.73.70' }}
            User ${{ secrets.SSH_USER || 'deployer' }}
            StrictHostKeyChecking no
            IdentityFile ~/.ssh/deploy_key
            LogLevel ERROR
          EOF

          chmod 600 ~/.ssh/config

          # Scan do host com tratamento de erro
          echo "Scanning host keys..."
          ssh-keyscan -H "${{ secrets.SSH_HOST || '89.116.73.70' }}" >> ~/.ssh/known_hosts 2>&1

          echo "SSH configuration complete!"
          echo "Testing connection..."
          ssh -i ~/.ssh/deploy_key -o BatchMode=yes -o ConnectTimeout=5 ${{ secrets.SSH_USER || 'deployer' }}@${{ secrets.SSH_HOST || '89.116.73.70' }} echo "SSH connection test successful!"

      # Build da aplicação
      - name: Build application
        run: |
          npm ci
          npm run build
          ls -la dist/

      # Resto do seu workflow...
