# name: Deploy Tudu API (Production)

# on:
#   push:
#     branches: ['master', 'main']

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     timeout-minutes: 30

#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'
#           cache: 'npm'

#       - name: Configure SSH
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.API_TUDU_SSH_KEY }}" > ~/.ssh/deploy_key
#           chmod 600 ~/.ssh/deploy_key

#           echo "Host ${{ secrets.SSH_HOST }}" > ~/.ssh/config
#           echo "  HostName ${{ secrets.SSH_HOST }}" >> ~/.ssh/config
#           echo "  User ${{ secrets.SSH_USER }}" >> ~/.ssh/config
#           echo "  IdentityFile ~/.ssh/deploy_key" >> ~/.ssh/config
#           echo "  StrictHostKeyChecking no" >> ~/.ssh/config
#           echo "  ConnectTimeout 15" >> ~/.ssh/config
#           chmod 600 ~/.ssh/config

#       - name: Build application
#         run: |
#           npm ci
#           npm run build
#           [ -d "dist" ] || { echo "::error::❌ Build failed"; exit 1; }

#       - name: Create deployment package
#         run: |
#           tar -czvf deploy.tar.gz \
#             dist/ \
#             package.json \
#             package-lock.json \
#             ecosystem.config.js \
#             prisma/
#           [ -f "deploy.tar.gz" ] || { echo "::error::❌ Failed to create package"; exit 1; }

#       - name: Deploy to server
#         run: |
#           scp -i ~/.ssh/deploy_key deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/

#           ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
#             set -eo pipefail

#             # 1. Usar diretório home do usuário (não requer sudo)
#             DEPLOY_DIR=\"\$HOME/tudu-api\"
#             mkdir -p \$DEPLOY_DIR

#             # 2. Limpeza segura
#             rm -rf \$DEPLOY_DIR/dist/ \$DEPLOY_DIR/package*.json \$DEPLOY_DIR/prisma/ \$DEPLOY_DIR/ecosystem.config.js

#             # 3. Extração
#             tar -xzf /tmp/deploy.tar.gz -C \$DEPLOY_DIR

#             cd \$DEPLOY_DIR

#             # 4. Configuração .env
#             cat > .env <<EOF
#             DATABASE_URL='${{ secrets.DATABASE_URL }}'
#             JWT_SECRET='${{ secrets.JWT_SECRET }}'
#             NODE_ENV=production
#             PORT=3000
#             EOF
#             chmod 600 .env

#             # 5. Instalação e migrações
#             npm ci --production
#             npx prisma generate
#             npx prisma migrate deploy

#             # 6. Gerenciamento PM2 (sem sudo)
#             export PATH=\"\$PATH:\$(npm bin -g)\"
#             pm2 delete tudu-api --silent || true
#             pm2 start ecosystem.config.js --update-env
#             pm2 save

#             # 7. Verificação
#             sleep 5
#             curl -sSf http://localhost:3000/health || {
#               echo '::error::❌ Health check failed'
#               pm2 logs tudu-api --lines 100
#               exit 1
#             }
#           "

name: Production Deploy

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx prisma generate

      - name: Build application
        run: |
          npm run build
          [ -d "dist" ] || { echo "::error::Build failed"; exit 1; }

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          cat > ~/.ssh/config <<EOF
          Host ${{ secrets.SSH_HOST }}
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USER }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            ConnectTimeout 15
          EOF
          chmod 600 ~/.ssh/config

      - name: Prepare deployment package
        run: |
          tar -czvf deploy.tar.gz \
            dist/ \
            package.json \
            package-lock.json \
            prisma/ \
            ecosystem.config.js
          [ -f "deploy.tar.gz" ] || { echo "::error::Failed to create package"; exit 1; }

      - name: Deploy to server
        run: |
          scp -i ~/.ssh/deploy_key deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/

          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            set -eo pipefail
            
            # Configurações de diretório (sem sudo)
            DEPLOY_DIR='/var/www/tudu-api'
            mkdir -p \$DEPLOY_DIR
            
            # Limpeza seletiva (preserva node_modules)
            cd \$DEPLOY_DIR
            rm -rf dist/ package*.json prisma/ ecosystem.config.js
            
            # Extração
            tar -xzf /tmp/deploy.tar.gz -C \$DEPLOY_DIR
            
            # Configuração do .env
            cat > .env <<EOF
            DATABASE_URL='${{ secrets.DATABASE_URL }}'
            JWT_SECRET='${{ secrets.JWT_SECRET }}'
            NODE_ENV=production
            PORT=3000
            # CORS Configuration
            CORS_ORIGIN='https://use-tudu.com.br,https://www.use-tudu.com.br'
            EOF
            chmod 600 .env
            
            # Instalação e migrações
            npm ci --production
            npx prisma generate
            npx prisma migrate deploy
            
            # Gerenciamento de processos
            pm2 delete tudu-api --silent || true
            pm2 start ecosystem.config.js --update-env
            pm2 save
            
            # Verificação básica
            sleep 10
            curl -sSf http://localhost:3000/health || {
              echo '::error::Initial health check failed'
              pm2 logs tudu-api --lines 50
              exit 1
            }
          "

      - name: Validate Deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            set -e
            
            # 1. Verificação de processo
            if ! pm2 list | grep -q 'tudu-api'; then
              echo '::error::Application not running in PM2'
              exit 1
            fi
            
            # 2. Teste CORS completo
            CORS_RESPONSE=\$(curl -sSI -X OPTIONS https://api.use-tudu.com.br \
              -H 'Origin: https://use-tudu.com.br' \
              -H 'Access-Control-Request-Method: POST' \
              -H 'Access-Control-Request-Headers: Content-Type,Authorization')
            
            echo \"\$CORS_RESPONSE\"
            
            if ! echo \"\$CORS_RESPONSE\" | grep -q 'Access-Control-Allow-Origin: https://use-tudu.com.br'; then
              echo '::error::CORS validation failed - Missing Allow-Origin header'
              exit 1
            fi
            
            if ! echo \"\$CORS_RESPONSE\" | grep -q 'Access-Control-Allow-Methods:'; then
              echo '::error::CORS validation failed - Missing Allow-Methods header'
              exit 1
            fi
            
            if ! echo \"\$CORS_RESPONSE\" | grep -q 'Access-Control-Allow-Credentials: true'; then
              echo '::error::CORS validation failed - Missing Allow-Credentials header'
              exit 1
            fi
            
            # 3. Teste de endpoint protegido por CORS
            API_RESPONSE=\$(curl -sS https://api.use-tudu.com.br/health \
              -H 'Origin: https://use-tudu.com.br')
            
            if ! echo \"\$API_RESPONSE\" | grep -q 'status'; then
              echo '::error::API endpoint test failed'
              exit 1
            fi
            
            echo '✅ All deployment validations passed successfully'
          "
