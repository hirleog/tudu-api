name: Deploy Tudu API (Production)

on:
  push:
    branches: ['master', 'main']

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # Configura√ß√£o SSH
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.API_TUDU_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          cat <<EOF > ~/.ssh/config
          Host ${{ secrets.SSH_HOST }}
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USER }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            ConnectTimeout 15
          EOF

          echo "${{ secrets.SSH_HOST }} ssh-rsa AAA..." >> ~/.ssh/known_hosts

      # Build da aplica√ß√£o
      - name: Build application
        run: |
          npm ci
          npm run build
          [ -d "dist" ] || { echo "‚ùå Build failed"; exit 1; }

      # Cria√ß√£o do pacote sem falhar se .env n√£o existir
      - name: Create deployment package
        run: |
          # Lista de arquivos obrigat√≥rios
          FILES="dist/ package.json package-lock.json ecosystem.config.js prisma/"

          # Adiciona .env apenas se existir
          [ -f ".env" ] && FILES="$FILES .env" || echo "‚ÑπÔ∏è .env n√£o inclu√≠do - ser√° criado no servidor"

          # Cria o pacote
          tar -czvf deploy.tar.gz $FILES

          # Verifica√ß√£o
          [ -f "deploy.tar.gz" ] || { echo "‚ùå Failed to create package"; exit 1; }
          echo "‚úÖ Conte√∫do do pacote:"
          tar -tzf deploy.tar.gz

      # Deploy no servidor
      - name: Deploy to server
        run: |
          scp -i ~/.ssh/deploy_key deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/

          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            set -eo pipefail
            echo '1. üßπ Limpando deploy anterior...'
            sudo rm -rf /var/www/tudu-api/*
            sudo mkdir -p /var/www/tudu-api
            
            echo '2. üì¶ Extraindo arquivos...'
            sudo tar -xzf /tmp/deploy.tar.gz -C /var/www/tudu-api
            
            echo '3. üîë Configurando .env...'
            cat <<EOF > /var/www/tudu-api/.env
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            # Adicione outras vari√°veis aqui
            EOF
            chmod 600 /var/www/tudu-api/.env
            
            echo '4. ‚öôÔ∏è Instalando depend√™ncias...'
            cd /var/www/tudu-api
            npm ci --production
            
            echo '5. üóÉÔ∏è Executando migra√ß√µes...'
            npx prisma generate
            npx prisma migrate deploy
            
            echo '6. üöÄ Iniciando aplica√ß√£o...'
            pm2 delete tudu-api --silent || true
            pm2 start ecosystem.config.js
            pm2 save
            
            echo '7. ‚úÖ Verificando...'
            pm2 list
            echo 'Sa√∫de da API:'
            curl -s http://localhost:3000/health || { echo '‚ùå Health check failed'; exit 1; }
          "
