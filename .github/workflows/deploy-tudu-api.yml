name: Deploy Tudu API (Production)

on:
  push:
    branches: ['master', 'main']

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # Configura√ß√£o SSH com verifica√ß√£o de secrets
      - name: Configure SSH
        run: |
          # Verifica√ß√£o obrigat√≥ria dos secrets
          if [ -z "${{ secrets.SSH_HOST }}" ] || [ -z "${{ secrets.SSH_USER }}" ] || [ -z "${{ secrets.API_TUDU_SSH_KEY }}" ]; then
            echo "::error::‚ùå Secrets n√£o configurados: Verifique SSH_HOST, SSH_USER e API_TUDU_SSH_KEY"
            exit 1
          fi

          mkdir -p ~/.ssh
          echo "${{ secrets.API_TUDU_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Config file com escape correto
          echo "Host ${{ secrets.SSH_HOST }}" > ~/.ssh/config
          echo "  HostName ${{ secrets.SSH_HOST }}" >> ~/.ssh/config
          echo "  User ${{ secrets.SSH_USER }}" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/deploy_key" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  ConnectTimeout 15" >> ~/.ssh/config

          chmod 600 ~/.ssh/config

          # Adiciona fingerprint (substitua pela do seu servidor)
          echo "${{ secrets.SSH_HOST }} ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAA..." >> ~/.ssh/known_hosts

      # Build da aplica√ß√£o
      - name: Build application
        run: |
          npm ci
          npm run build
          [ -d "dist" ] || { echo "::error::‚ùå Build failed - dist folder missing"; exit 1; }
          [ -f "ecosystem.config.js" ] || { echo "::error::‚ùå Missing ecosystem.config.js"; exit 1; }

      # Cria√ß√£o do pacote
      - name: Create deployment package
        run: |
          FILES="dist/ package.json package-lock.json ecosystem.config.js prisma/"
          [ -f ".env" ] && FILES="$FILES .env" || echo "‚ÑπÔ∏è .env n√£o inclu√≠do - ser√° criado no servidor"

          tar -czvf deploy.tar.gz $FILES
          [ -f "deploy.tar.gz" ] || { echo "::error::‚ùå Failed to create package"; exit 1; }
          echo "‚úÖ Package contents:"
          tar -tzf deploy.tar.gz

      # Deploy no servidor
      - name: Deploy to server
        run: |
          scp -o ConnectTimeout=15 \
              -i ~/.ssh/deploy_key \
              deploy.tar.gz \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/ || {
            echo "::error::‚ùå Falha no upload do pacote";
            exit 1;
          }

          ssh -o ConnectTimeout=15 \
              -i ~/.ssh/deploy_key \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            set -eo pipefail
            echo '1. üßπ Preparando ambiente...'
            sudo mkdir -p /var/www/tudu-api
            cd /var/www/tudu-api
            sudo rm -rf ./*
            
            echo '2. üì¶ Extraindo arquivos...'
            sudo tar -xzf /tmp/deploy.tar.gz -C .
            sudo chown -R ${{ secrets.SSH_USER }}:www-data .
            
            echo '3. üîë Configurando .env...'
            cat <<EOF > .env
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            PORT=3000
            NODE_ENV=production
            EOF
            chmod 600 .env
            
            echo '4. ‚öôÔ∏è Instalando depend√™ncias...'
            npm ci --production
            
            echo '5. üóÉÔ∏è Executando migra√ß√µes...'
            npx prisma generate
            npx prisma migrate deploy
            
            echo '6. üöÄ Iniciando aplica√ß√£o...'
            pm2 delete tudu-api --silent || true
            pm2 start ecosystem.config.js
            pm2 save
            
            echo '7. ‚úÖ Verifica√ß√£o final...'
            echo '=== Arquivos ==='
            ls -la
            echo '=== PM2 Status ==='
            pm2 list
            echo '=== Health Check ==='
            curl -sSf http://localhost:3000/health || {
              echo '::error::‚ùå Health check failed';
              exit 1;
            }
          " || {
            echo "::error::‚ùå Falha durante o deploy remoto";
            exit 1;
          }
