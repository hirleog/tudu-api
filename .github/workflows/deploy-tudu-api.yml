name: Deploy Tudu API (Production)

on:
  push:
    branches: ['master', 'main']

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # Configura√ß√£o SSH robusta
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.API_TUDU_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          cat <<EOF > ~/.ssh/config
          Host ${{ secrets.SSH_HOST }}
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USER }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            ConnectTimeout 15
          EOF

          # Adiciona fingerprint manualmente (substitua pela do seu servidor)
          echo "${{ secrets.SSH_HOST }} ssh-rsa AAAAB3NzaC1yc2E..." >> ~/.ssh/known_hosts

      # Build com verifica√ß√µes
      - name: Build application
        run: |
          npm ci
          npm run build
          [ -d "dist" ] || { echo "‚ùå Build failed - dist folder missing"; exit 1; }
          [ -f "ecosystem.config.js" ] || { echo "‚ùå Missing ecosystem.config.js"; exit 1; }

      # Cria√ß√£o do pacote com tratamento de arquivos opcionais
      - name: Create deployment package
        run: |
          # Lista de arquivos obrigat√≥rios
          FILES="dist/ package.json package-lock.json ecosystem.config.js prisma/"

          # Adiciona .env apenas se existir
          [ -f ".env" ] && FILES="$FILES .env" || echo "‚ÑπÔ∏è .env not included - this is normal if using secrets"

          # Cria o pacote
          tar -czvf deploy.tar.gz $FILES

          # Verifica√ß√£o final
          [ -f "deploy.tar.gz" ] || { echo "‚ùå Failed to create package"; exit 1; }
          echo "‚úÖ Package contents:"
          tar -tzf deploy.tar.gz

      # Deploy completo
      - name: Deploy to server
        run: |
          scp -i ~/.ssh/deploy_key deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/

          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            set -eo pipefail
            echo '### üßπ Cleaning old deployment...'
            sudo rm -rf /var/www/tudu-api/*
            sudo mkdir -p /var/www/tudu-api
            
            echo '### üì¶ Extracting files...'
            sudo tar -xzf /tmp/deploy.tar.gz -C /var/www/tudu-api
            sudo chown -R ${{ secrets.SSH_USER }}:www-data /var/www/tudu-api
            
            # Cria .env a partir de secrets se necess√°rio
            if [ ! -f "/var/www/tudu-api/.env" ]; then
              echo '### üõ† Creating .env from secrets...'
              cat <<ENV > /var/www/tudu-api/.env
              DATABASE_URL=${{ secrets.DATABASE_URL }}
              JWT_SECRET=${{ secrets.JWT_SECRET }}
              # Adicione outras vari√°veis aqui
              ENV
              chmod 600 /var/www/tudu-api/.env
            fi
            
            echo '### ‚öôÔ∏è Installing dependencies...'
            cd /var/www/tudu-api
            npm ci --production
            
            echo '### üóÉÔ∏è Running database migrations...'
            npx prisma generate
            npx prisma migrate deploy
            
            echo '### üöÄ Starting application...'
            cd /var/www/tudu-api
            pm2 delete tudu-api --silent || true
            pm2 start ecosystem.config.js
            pm2 save
            
            echo '### ‚úÖ Verification...'
            echo 'Arquivos no diret√≥rio:'
            ls -la /var/www/tudu-api
            echo '\nStatus PM2:'
            pm2 list
            echo '\nLogs:'
            pm2 logs tudu-api --lines 5 --nostream
          "
