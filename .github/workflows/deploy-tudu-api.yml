name: Deploy Tudu API (Production)

on:
  push:
    branches: ['master', 'main']

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.API_TUDU_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          echo "Host ${{ secrets.SSH_HOST }}" > ~/.ssh/config
          echo "  HostName ${{ secrets.SSH_HOST }}" >> ~/.ssh/config
          echo "  User ${{ secrets.SSH_USER }}" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/deploy_key" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  ConnectTimeout 15" >> ~/.ssh/config

          chmod 600 ~/.ssh/config

      - name: Build application
        run: |
          npm ci
          npm run build
          [ -d "dist" ] || { echo "::error::❌ Build failed"; exit 1; }

      - name: Create deployment package
        run: |
          # Verifica se .env.example existe, caso contrário cria um vazio
          if [ ! -f .env.example ]; then
            touch .env.example
            echo "DATABASE_URL=\"mysql://user:password@host:port/db\"" >> .env.example
            echo "JWT_SECRET=\"your_jwt_secret\"" >> .env.example
          fi

          tar -czvf deploy.tar.gz \
            dist/ \
            package.json \
            package-lock.json \
            ecosystem.config.js \
            prisma/ \
            .env.example || { echo "::warning::Some files were not included"; true; }

      - name: Deploy to server
        run: |
          scp -i ~/.ssh/deploy_key deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/

          ssh -i ~/.ssh/deploy_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            set -eo pipefail
            DEPLOY_DIR=\"/var/www/tudu-api\"
            
            # Cria diretório se não existir
            mkdir -p \$DEPLOY_DIR
            
            # Extrai arquivos ignorando erros de arquivos faltantes
            tar -xzf /tmp/deploy.tar.gz -C \$DEPLOY_DIR --warning=no-absent-files
            
            cd \$DEPLOY_DIR
            
            # Configura .env apenas se não existir
            if [ ! -f .env ]; then
              [ -f .env.example ] && cp .env.example .env || touch .env
              echo \"NODE_ENV=production\" >> .env
              echo \"PORT=3000\" >> .env
            fi
            
            # Atualiza apenas as variáveis necessárias
            sed -i \"s|DATABASE_URL=.*|DATABASE_URL='${{ secrets.DATABASE_URL }}'|\" .env
            sed -i \"s|JWT_SECRET=.*|JWT_SECRET='${{ secrets.JWT_SECRET }}'|\" .env
            chmod 600 .env
            
            # Instalação e migrações
            npm ci --production
            npx prisma generate
            npx prisma migrate deploy
            
            # Reinicia a aplicação
            pm2 delete tudu-api --silent || true
            pm2 start ecosystem.config.js --update-env
            pm2 save
            
            # Verificação
            sleep 5
            curl -sSf http://localhost:3000/health || {
              echo '::error::❌ Health check failed';
              pm2 logs tudu-api --lines 50;
              exit 1;
            }
          "
